scalar DateTime

enum MessageOrdering {
  createdAt_DESC
  likes_DESC
  dislikes_DESC
}

type Query {
  messages(filter: String, orderBy: MessageOrdering, first: Int, after: ID): Messages!
  replies: [Reply!]
}

type Messages {
  items: [Message!]
  count: Int!
}

type Mutation {
  postMessage(body: String!): Message
  postReply(messageId: ID!, body: String!): Reply
  updateMessage(messageId: ID!): Message

  likeMessage(messageId: ID!, amount: Int!): Message
  dislikeMessage(messageId: ID!, amount: Int!): Message
}

type Subscription {
  message: Message
}

type Message {
  id: ID!
  body: String!
  likes: Int!
  dislikes: Int!
  createdAt: DateTime!

  replies: [Reply!]
}

type Reply {
  id: ID!
  body: String!
  likes: Int!
  dislikes: Int!
  createdAt: DateTime!

  message: Message # If we make `message` required, generated types will conflict with prisma's
}
